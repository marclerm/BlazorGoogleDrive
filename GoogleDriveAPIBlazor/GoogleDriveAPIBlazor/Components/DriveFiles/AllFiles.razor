@using Services
@inject NavigationManager Navigation
@inject GoogleOAuthService GoogleService
@inject Microsoft.JSInterop.IJSRuntime JS

@if (DriveFiles != null)
{
    <table class="table table-sm table-striped align-middle">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Last Modified</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in DriveFiles)
            {
                <tr>
                    <td>
                        <a href="@file.ViewLink" target="_blank" title="@file.FullPath">
                            @file.Name
                        </a>
                    </td>
                    <td>
                        @file.ModifiedTime?.ToString("yyyy-MM-dd HH:mm")
                    </td>
                    <td class="d-flex gap-2">
                        <button type="button"
                                class="btn btn-sm btn-outline-primary"
                                title="Edit"
                                @onclick="() => ClickEdit(file)">
                            <i class="bi bi-pencil-square"></i>
                        </button>

                        <button type="button"
                                class="btn btn-sm btn-outline-secondary"
                                title="Download"
                                @onclick="() => ClickDownload(file.Id)">
                            <i class="bi bi-cloud-download"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public List<GoogleFileModel>? DriveFiles { get; set; }
    [Parameter]
    public Google.Apis.Auth.OAuth2.Responses.TokenResponse? GoogleToken { get; set; }

    [Parameter]
    public EventCallback<GoogleFileModel> OnEditFile { get; set; }
    
    private async Task ClickDownload(string fileId)
    {
        if (GoogleToken is null) return;

        try
        {
            var (content, fileName, mime) = await GoogleService.DownloadFileAsync(GoogleToken, fileId, "current-user");
            var base64 = Convert.ToBase64String(content);
            await JS.InvokeVoidAsync("downloadFileFromBase64", fileName, base64, mime);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Download failed: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void ClickEdit(GoogleFileModel file)
    {
        OnEditFile.InvokeAsync(file);
    }
}
